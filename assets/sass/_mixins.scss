@mixin transition($args...) {
     @include vendor-prefixes('transition', $args);
}
@mixin masonry($count, $gap : 0px, $rule: 0px) {
     @include vendor-prefixes('column-count', $count);
     @include vendor-prefixes('column-gap', $gap);
     @include vendor-prefixes('column-rule', $rule);
}
@mixin parallax($url, $pos) {
     background-image: url($url);
     background-position: center $pos;
     background-attachment: fixed;
     background-size: cover;
}
@mixin overlay-filter($color, $opacity: .2) {
     $amount: 1 - $opacity;
     &::after {
          position: absolute;
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          content: " ";
          z-index: 1;
          background: transparentize($color, $amount);
     }
     > *[class^="container"] {
          position: relative;
          z-index: 2;
     }
}
@mixin aspect-ratio($w, $h) {
     position: relative;
     &:before {
          display: block;
          content: " ";
          width: 100%;
          padding-top: ($h / $w) * 100%;
     }
     > .elmnt  {
          position: absolute;
          width: 100%;
          height: 100%;
          top: 0;
          left: 0;
     }
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin vendor-prefixes($attr, $value) {
     -webkit-#{$attr}: $value;
     #{$attr}: $value;
     -moz-#{$attr}: $value;
     -ms-#{$attr}: $value;
     -o-#{$attr}: $value;
}

@mixin media-breakpoint-min($limit) {
     @media (min-width: #{$limit} ) {
          @content;
     }
}
@mixin media-breakpoint-max($limit) {
     @media (max-width: #{$limit} ) {
          @content;
     }
}
